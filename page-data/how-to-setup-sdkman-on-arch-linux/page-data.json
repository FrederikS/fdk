{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/how-to-setup-sdkman-on-arch-linux/","result":{"data":{"post":{"__typename":"MdxPost","slug":"/how-to-setup-sdkman-on-arch-linux/","title":"How to set up SDKMAN on Arch Linux","date":"13.04.2020","tags":[{"name":"java","slug":"java"},{"name":"sdkman","slug":"sdkman"},{"name":"archlinux","slug":"archlinux"},{"name":"vscode-java","slug":"vscode-java"}],"description":"For java development it is sometimes necessary to switch between different jdk versions. That is my SDKMAN setup on arch linux to deal with it.","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to set up SDKMAN on Arch Linux\",\n  \"slug\": \"/how-to-setup-sdkman-on-arch-linux\",\n  \"date\": \"2020-04-13T00:00:00.000Z\",\n  \"description\": \"For java development it is sometimes necessary to switch between different jdk versions. That is my SDKMAN setup on arch linux to deal with it.\",\n  \"tags\": [\"java\", \"sdkman\", \"archlinux\", \"vscode-java\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"For java development it is sometimes necessary to switch between different jdk versions.\\nThat is my SDKMAN setup on arch linux to deal with it.\"), mdx(\"h3\", null, \"Installation\"), mdx(\"p\", null, \"There is one AUR package available called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sdkman\"), \" but its seems to be an unofficial sdkman client.\\nTo use the official one you should follow the instructions from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://sdkman.io/install\"\n  }), \"here\"), \". It is pretty fast and easy.\\nBasically you install it via curl from the command line.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"> curl -s \\\"https://get.sdkman.io\\\" | bash\\n\")), mdx(\"p\", null, \"This command installs all necessary scripts and files you need in your home directory.\"), mdx(\"h4\", null, \"Basic Configuration\"), mdx(\"p\", null, \"And to have a proper initialized sdkman for each shell session you have to add one line to you \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bashrc\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".zshrc\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell:title=~/.zshrc\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"[[ -s \\\"/home/dudette/.sdkman/bin/sdkman-init.sh\\\" ]] && source \\\"/home/dudette/.sdkman/bin/sdkman-init.sh\\\"\\n\")), mdx(\"p\", null, \"Of course you need to replace the home directory name accordingly to your username or you might use something like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$HOME\"), \" from your env here.\\nTo avoid collision with java installed on system level it is useful to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unset\"), \" the default system java environment by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"archlinux-java\"), \"\\nscript that comes along with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java-runtime-common\"), \" package.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"> sudo archlinux-java unset\\n\")), mdx(\"h3\", null, \"Usage\"), mdx(\"p\", null, \"So far so good. We are ready to use sdkman. To install a java version we check which of them are available.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"> sdk ls java\\n\\n================================================================================\\nAvailable Java Versions\\n================================================================================\\n Vendor        | Use | Version      | Dist    | Status     | Identifier\\n--------------------------------------------------------------------------------\\n AdoptOpenJDK  |     | 14.0.0.j9    | adpt    |            | 14.0.0.j9-adpt\\n               |     | 14.0.0.hs    | adpt    |            | 14.0.0.hs-adpt\\n               |     | 13.0.2.j9    | adpt    |            | 13.0.2.j9-adpt\\n               |     | 13.0.2.hs    | adpt    |            | 13.0.2.hs-adpt\\n               |     | 12.0.2.j9    | adpt    |            | 12.0.2.j9-adpt\\n               |     | 12.0.2.hs    | adpt    |            | 12.0.2.hs-adpt\\n               |     | 11.0.6.j9    | adpt    |            | 11.0.6.j9-adpt\\n               |     | 11.0.6.hs    | adpt    |            | 11.0.6.hs-adpt\\n               |     | 8.0.242.j9   | adpt    |            | 8.0.242.j9-adpt\\n               |     | 8.0.242.hs   | adpt    |            | 8.0.242.hs-adpt\\n Amazon        |     | 11.0.6       | amzn    |            | 11.0.6-amzn\\n               |     | 8.0.242      | amzn    |            | 8.0.242-amzn\\n Azul Zulu     |     | 14.0.0       | zulu    |            | 14.0.0-zulu\\n               |     | 13.0.2       | zulu    |            | 13.0.2-zulu\\n               |     | 12.0.2       | zulu    |            | 12.0.2-zulu\\n               |     | 11.0.6       | zulu    |            | 11.0.6-zulu\\n               |     | 11.0.6.fx    | zulu    |            | 11.0.6.fx-zulu\\n               |     | 10.0.2       | zulu    |            | 10.0.2-zulu\\n               |     | 9.0.7        | zulu    |            | 9.0.7-zulu\\n               |     | 8.0.242      | zulu    |            | 8.0.242-zulu\\n               |     | 8.0.232.fx   | zulu    |            | 8.0.232.fx-zulu\\n               |     | 7.0.242      | zulu    |            | 7.0.242-zulu\\n               |     | 6.0.119      | zulu    |            | 6.0.119-zulu\\n BellSoft      |     | 14.0.0.fx    | librca  |            | 14.0.0.fx-librca\\n               |     | 14.0.0       | librca  |            | 14.0.0-librca\\n               |     | 13.0.2.fx    | librca  |            | 13.0.2.fx-librca\\n               |     | 13.0.2       | librca  |            | 13.0.2-librca\\n               |     | 12.0.2       | librca  |            | 12.0.2-librca\\n               |     | 11.0.6.fx    | librca  |            | 11.0.6.fx-librca\\n               |     | 11.0.6       | librca  |            | 11.0.6-librca\\n               |     | 8.0.242.fx   | librca  |            | 8.0.242.fx-librca\\n               |     | 8.0.242      | librca  |            | 8.0.242-librca\\n GraalVM       |     | 20.0.0.r11   | grl     |            | 20.0.0.r11-grl\\n               |     | 20.0.0.r8    | grl     |            | 20.0.0.r8-grl\\n               |     | 19.3.1.r11   | grl     |            | 19.3.1.r11-grl\\n               |     | 19.3.1.r8    | grl     |            | 19.3.1.r8-grl\\n               |     | 19.3.0.r11   | grl     |            | 19.3.0.r11-grl\\n               |     | 19.3.0.r8    | grl     |            | 19.3.0.r8-grl\\n               |     | 19.3.0.2.r11 | grl     |            | 19.3.0.2.r11-grl\\n               |     | 19.3.0.2.r8  | grl     |            | 19.3.0.2.r8-grl\\n               |     | 19.2.1       | grl     |            | 19.2.1-grl\\n               |     | 19.1.1       | grl     |            | 19.1.1-grl\\n               |     | 19.0.2       | grl     |            | 19.0.2-grl\\n               |     | 1.0.0        | grl     |            | 1.0.0-rc-16-grl\\n Java.net      |     | 15.ea.18     | open    |            | 15.ea.18-open\\n               |     | 14.0.0       | open    | installed  | 14.0.0-open\\n               |     | 13.0.2       | open    |            | 13.0.2-open\\n               |     | 12.0.2       | open    |            | 12.0.2-open\\n               |     | 11.0.6       | open    | installed  | 11.0.6-open\\n               |     | 10.0.2       | open    |            | 10.0.2-open\\n               |     | 9.0.4        | open    |            | 9.0.4-open\\n               | >>> | 8.0.242      | open    | installed  | 8.0.242-open\\n SAP           |     | 13.0.2       | sapmchn |            | 13.0.2-sapmchn\\n               |     | 12.0.2       | sapmchn |            | 12.0.2-sapmchn\\n               |     | 11.0.6       | sapmchn |            | 11.0.6-sapmchn\\n================================================================================\\n\")), mdx(\"p\", null, \"To install one of the candidates we are using the identifier from the last column of the output table.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"> sdk install java 11.0.3.hs-adpt\\n\")), mdx(\"p\", null, \"Whenever you want to switch from one version to another you either use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"use\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default\"), \" command.\\nThe different between those is that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"use\"), \" only changes the version for the current shell and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default\"), \" will change it for every shell.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"// changes version for current shell\\n> sdk use java 14.0.0-open\\n\\n// changes version for every shell\\n> sdk default java 14.0.0-open\\n\")), mdx(\"h3\", null, \"The tricky part\"), mdx(\"p\", null, \"As long as you only working from the in your shell everything is working fine.\\nBut in case you want to work with an IDE like \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"vscode-java\"), \" and you are not starting it from the command line\\nthe current configured java version is not picked up properly.\\nWhy not and how does it work? There are several ways for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"vscode-java\"), \" to define the jdk path that should be used.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"java.home\"), \" setting in VS Code settings (workspace then user settings)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"JDK_HOME\"), \" environment variable\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"JAVA_HOME\"), \" environment variable\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"on the current system path\")), mdx(\"p\", null, \"These are the steps and the order of how it tries to find the correct jdk path. Lets go through them.\\nFirst option to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"java.home\"), \" would be easy, but it only fixes the problem for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"vscode-java\"), \" and other applications would still have issues.\\nLast option wont work since sdkman and candidates are installed in our users directory and not on system level.\\nSecond and third option seems to be the way to go.\\nI chose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JAVA_HOME\"), \" because it seems to be more the standard of what is used by the majority of applications.\"), mdx(\"h4\", null, \"What is the problem? Sdkman exports the according environment variable.\"), mdx(\"p\", null, \"Indeed, sdkman already exports the proper \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JAVA_HOME\"), \" environment variable, but only on shell scope.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"> echo $JAVA_HOME\\n\\n/home/dudette/.sdkman/candidates/java/current\\n\")), mdx(\"p\", null, \"We need it globally so that it is also picked up by application that are spawned by our window manager.\\nNormally you would define global environment variable somewhere in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/environment\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/etc/profile\"), \".\\nBut since sdkman runs on our user level it is a bad idea to put something user specific at system level and other users would get into trouble.\"), mdx(\"h3\", null, \"Enable the environment variable globally for an user\"), mdx(\"p\", null, \"What we want is to define it global but only for our user.\\nOne way to do it, is to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"systemd\"), \" daemon and put or environment variable to a conf file into our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.config/environment.d/\"), \" directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell:title=~/.config/environment.d/sdkman.conf\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }), \"JAVA_HOME=/home/dudette/.sdkman/candidates/java/current\\n\")), mdx(\"p\", null, \"After a reboot or a re-login of your user \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JAVA_HOME\"), \" should get picked up by \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"vscode-java\"), \" and other applications.\\nBecause the value here points to a symlink it will also work whenever you switch java versions.\"), mdx(\"h3\", null, \"Goody for ZSH users\"), mdx(\"p\", null, \"For those who are enjoying completions for zsh, they are also available for SDKMAN.\\nFollow the instructions from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sdkman/sdkman-cli/blob/master/zsh/README.md\"\n  }), \"here\"), \" to set them up.\"), mdx(\"p\", null, \"Happy version switching!\"), mdx(\"h4\", null, \"References\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://sdkman.io/install\"\n  }), \"https://sdkman.io/install\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://sdkman.io/usage\"\n  }), \"https://sdkman.io/usage\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/redhat-developer/vscode-java#setting-the-jdk\"\n  }), \"https://github.com/redhat-developer/vscode-java#setting-the-jdk\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://wiki.archlinux.org/index.php/Environment_variables\"\n  }), \"https://wiki.archlinux.org/index.php/Environment_variables\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/sdkman/sdkman-cli/wiki/FAQ\"\n  }), \"https://github.com/sdkman/sdkman-cli/wiki/FAQ\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/sdkman/sdkman-cli/blob/master/zsh/README.md\"\n  }), \"https://github.com/sdkman/sdkman-cli/blob/master/zsh/README.md\"))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"For java development it is sometimes necessary to switch between different jdk versions.\nThat is my SDKMAN setup on arch linux to deal with…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/how-to-setup-sdkman-on-arch-linux/","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}